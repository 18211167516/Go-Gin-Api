{"./":{"url":"./","title":"基本介绍","keywords":"","body":"1、项目说明 [!NOTE] 该项目为开源项目[Go-Gin-Api]项目文档 Go-Gin-Api 是基于 Gin 进行模块化设计的 API 框架，封装了常用的功能，使用简单，致力于进行快速的业务研发，v2.0支持后台管理，使用Light Year Admin 模板，至于说为啥不用前后端分离，使用vue，我觉得大部分后端程序员学习vue的成本还是很高的，公司会有专门的前端同学 powered by Gitbook该文件最后修改时间： 2021-10-24 17:32:05 "},"入门/":{"url":"入门/","title":"入门指南","keywords":"","body":"入门指南.md [!NOTE] 整体项目的环境安装、项目启动 希望你有所收获 powered by Gitbook该文件最后修改时间： 2021-10-24 17:40:25 "},"入门/docker-install.html":{"url":"入门/docker-install.html","title":"docker环境安装","keywords":"","body":"php环境安装 1、docker更换阿里云镜像源 1.在windows命令行执行docker-machine ssh [machine-name]进入VM bash 2.sudo vi /var/lib/boot2docker/profile 3.在--label provider=virtualbox的下一行添加 --registry-mirror=https://k5paawyp.mirror.aliyuncs.com 4.重启docker服务： sudo /etc/init.d/docker restart或者重启VM：exit退出VM bash， 在windows命令行中执行docker-machine restart 5.直接执行命令：ggdocker-machine ssh default \"echo 'EXTRA_ARGS=\\\"--registry-mirror=https://k5paawyp.mirror.aliyuncs.com\\\"' sudo tee -a /var/lib/boot2dock er/profile\" docker-machine restart default 2、基于docker [!NOTE] 目录结构 ├─config （配置文件目录） | ├─conf.d （nginx的conf.d） | ├─mysql.cnf （mysql配置） | ├─redis.conf （redis配置） ├─log （日志目录） | ├─mysql （mysql日志） ├─mysql （mysql数据目录） ├─docker-compose.yaml （docker-composer） [!NOTE] docker-composer.yaml version: \"3\" services: mysql: image: mysql:5.6 ports: - \"3306:3306\" volumes: - ./conf/mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro - ./mysql:/var/lib/mysql/new/:rw - ./log/mysql/:/var/log/mysql/:rw restart: always networks: - default environment: MYSQL_ROOT_PASSWORD: \"123456\" TZ: \"$TZ\" redis: image: redis:5.0.3-alpine ports: - \"6379:6379\" volumes: - ./conf/redis.conf:/etc/redis.conf:ro restart: always entrypoint: [\"redis-server\", \"/etc/redis.conf\"] environment: TZ: \"TZ=Asia/Shanghai\" networks: - default memcached: image: memcached:latest ports: - \"11211:11211\" 3、docker-compose docker-compose up 编译并启动 docker-compose restart 重启容器 powered by Gitbook该文件最后修改时间： 2021-10-24 17:38:56 "},"入门/git.html":{"url":"入门/git.html","title":"项目配置以及启动","keywords":"","body":"git代码托管以及代码管理 [!TIP] git下载 git clone https://github.com/18211167516/Go-Gin-Api.git [!TIP] 导入并执行sql文件 static/config/init.sql [!TIP] 下载热编译工具 go get github.com/pilu/fresh [!TIP] 热编译项目 fresh 配置文件是当前项目下 runner.conf [!TIP] 编译项目并启动 make文章 1、使用go编译 go build . 2、windows下使用make命令,需要下载make 3、启动 [!TIP] 登录后台 账号：admin 密码：Admin123 powered by Gitbook该文件最后修改时间： 2021-10-24 18:00:48 "},"技术选型/":{"url":"技术选型/","title":"技术选型","keywords":"","body":"1、项目说明 [!NOTE] 该项目为开源项目[Go-Gin-Api]项目文档 用Gin快速搭建基础restful风格API，Gin是一个go语言编写的Web框架 数据校验 go-playground gin框架内置，已支持错误信息转中文 数据库：采用MySql(5.6.44)版本，使用gorm实现对数据库的基本操作。 API文档：使用Swagger构建自动化文档。 热重启HotStart,我自己写的一个 配置文件 使用viper解析 日志：使用zap实现日志记录。 RBAC权限：使用casbin实现 powered by Gitbook该文件最后修改时间： 2021-10-24 18:01:35 "},"核心架构/":{"url":"核心架构/","title":"项目架构","keywords":"","body":" [!TIP] 整体架构 1、目录结构 ├─app （项目核心目录） | ├─controller （控制器） | ├─middleware （中间件） | ├─models （数据结构层） | ├─request （数据请求层，定义特殊请求结构体以及数据校验） | ├─request （数据展示层定义结构体） | ├─services （服务层） ├─config （配置包） ├─core （內核） ├─docs （swagger文档目录） ├─global （全局变量） ├─initialize (初始化) ├─routes （路由） ├─static （静态文件包括config目录） ├─templates （模板） ├─tests （测试） └─tool （工具） 2、组件支持 支持Swagger接口文档生成 支持jwt鉴权 支持logrus(准备替换成zap) 支持viper 配置文件解析 支持go1.6.0 go:embed特性,打包包含静态文件 支持gorm 数据库组件、支持读写分离，数据库主从 支持web界面 使用 Light Year Admin 模板 支持支持多角色的RBAC权限控制，使用casbin 后续支持工具生成项目 支持热编译fresh powered by Gitbook该文件最后修改时间： 2021-10-24 18:05:10 "},"功能/":{"url":"功能/","title":"基础功能","keywords":"","body":" [!NOTE] 主要看自实现的一些核心功能 powered by Gitbook该文件最后修改时间： 2021-10-24 18:08:53 "},"联系方式/":{"url":"联系方式/","title":"联系方式","keywords":"","body":" [!NOTE] 作者个人联系方式 powered by Gitbook该文件最后修改时间： 2021-10-24 18:28:33 "}}